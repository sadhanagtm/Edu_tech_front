import "react-toastify/dist/ReactToastify.css";

import React, { useEffect, useState } from "react";
import Tabs, { TabPane } from "rc-tabs";
import { ToastContainer, toast } from "react-toastify";

import BreakPointTest from "../../../components/test/BreakPointTest";
import CourseSection from "./CourseSection";
import Head from "next/head";
import InstructorProfileCard from "./InstructorProfileCard";
import Layout from "../../../HOC/Layout/Layout";
import LearningTabs from "./Tabs/LearningTabs";
import ScrollIntoView from "react-scroll-into-view";
import UserProgress from "./UserProgress";
import VideoJS from "../../../components/VideoPlayer/VideoJS";
import axios from "../../../HOC/Axios/Axios";
import { useRouter } from "next/router";

export async function getServerSideProps(context) {
  //   // Fetch data from external API
  const { watch_v } = context.query;
  const res = await fetch(
    `${process.env.NEXT_PUBLIC_API}/course/enrolled_contents/${watch_v}`
  );
  const resed = await fetch(
    `${process.env.NEXT_PUBLIC_API}/instructor/byCourse/${watch_v}`
  );

  const { data } = await res.json();
  const instructor = await resed.json();

  //   // Pass data lto the page via props
  return { props: { data, watch_v, instructor } };
}

function Learn({ data, watch_v, instructor }) {
  console.log("========");
  console.log(data, watch_v, instructor);
  console.log("========");

  const [Progress, setProgress] = useState([]);
  const [showProgress, setShowProgress] = useState(false);
  const getProgress = () => {
    axios.get(`/course-progress/byStudents/${data?.id}`).then((res) => {
      if ((res.status = 200)) {
        console.log(res);
        setProgress(res.data);
      }
    });
  };
  const [clicked, setClicked] = useState("");
  useEffect(() => {
    getProgress();
  }, [data]);
  const sectionData = [
    {
      id: 1,
      title: "Section 1",
    },
    {
      id: 2,
      title: "Section 2",
    },
    {
      id: 3,
      title: "Section 3",
    },
    {
      id: 4,
      title: "Section 4",
    },
  ];
  console.log("faq", watch_v);

  const router = useRouter();
  // const { watch_v } = router.query;

  const playerRef = React.useRef(null);
  const [Video, setVideo] = useState(
    data.course_section[0].course_content[0].video
  );

  const progessUpdate = () => {
    // alert(localStorage.getItem("coid"));

    try {
      axios
        .patch(`/course-progress/${watch_v}`, {
          content_id: localStorage.getItem("coid"),
        })
        .then((res) => {
          if (res.status === 200) {
            getProgress();
          }
        })
        .catch((err) => {
          console.log(err);
        });
    } catch (err) {
      console.log(err);
    }
  };
  const setClickedOne = (id) => {
    localStorage.setItem("coid", id);
    setClicked(id);
    // alert(id);
  };
  const handlePlayerReady = (player) => {
    playerRef.current = player;

    // You can handle player events here, for example:
    player.on("waiting", () => {
      // player.log("player is waiting");
    });
    player.on("ended", () => {
      progessUpdate();
    });

    player.on("dispose", () => {
      player.log("player will dispose");
    });
  };
  const PlayVideo = (Video) => {
    console.log(Video);
    let videoJsOptions = {
      autoplay: true,
      controls: true,
      responsive: true,
      fluid: true,
      sources: [
        {
          src: Video,
          type: "video/mp4",
        },
      ],
    };
    console.log(videoJsOptions);

    return (
      <VideoJS
        options={videoJsOptions}
        onReady={handlePlayerReady}
        // poster="https://images.pexels.com/photos/2468773/pexels-photo-2468773.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1"
      />
    );
  };
  const getVideo = (id) => {
    setVideo(id);
    window.scrollTo({ top: 0, left: 0, behavior: "smooth" });
  };
  let mod;
  if (Video) {
    mod = PlayVideo(Video);
  }

  useEffect(() => {
    PlayVideo(Video);
  }, [Video, PlayVideo]);

  return (
    <div>
      <Head>
        <title className="">Sikka-i</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon-16x16.png" />
      </Head>
      <Layout>
        <div className="bg-gray-100">
          <div className="container mx-auto px-4 lg:px-8">
            <div className="grid lg:grid-cols-10 gap-8 w-full">
              {/* left section  */}
              <div className="lg:col-span-7 mt-3">
                {mod}
                <h1 className="text-lg md:text-3xl font-bold mt-4 capitalize">
                  {" "}
                  {data?.course_name}
                </h1>
                <div className="-mt-2 text-xs sm:text-sm text-gray-600 font-medium">
                  <p>Published in Jan 18,2021</p>
                </div>
                {/* <BreakPointTest /> */}
                {/* course content for mobile devices  */}
                <div className="lg:hidden my-8  ">
                  <div className="my-4 flex items-center justify-between">
                    <p className="text-gray-700 font-semibold">
                      Course Content
                    </p>
                    <div
                      className="text-primary font-semibold cursor-pointer"
                      onClick={() => {
                        setShowProgress(!showProgress);
                      }}
                    >
                      View Progress
                    </div>
                  </div>
                  <div
                    className={` ${
                      showProgress
                        ? "visible opacity-100 transform translate-y-0  transition-all duration-700"
                        : "invisible relative opacity-0 transform -translate-y-4 transition-all duration-700  h-0 z-10"
                    }`}
                  >
                    <UserProgress
                      completed_contents={
                        Progress.data ? Progress.data.completed_contents : null
                      }
                      total_contents={Progress.data?.total_contents}
                    />
                  </div>
                  <hr className="lg:hidden my-4 border-gray-400" />

                  <CourseSection
                    setClicked={setClickedOne}
                    // clicked={clicked}
                    // key={i}
                    // title={item.section_title}
                    // id={item.id}
                    data={data.course_section}
                    body={data.course_section}
                    setVideos={getVideo}
                    // contents={item.course_content}
                    // count={i + 1}
                  />
                </div>
                {/* course content for mobile devices ends   */}

                <hr className="lg:hidden my-4 border-gray-300" />

                <div className="lg:w-full row-start-3 lg:row-start-2 lg:col-span-7 ">
                  {/* video player section  */}
                  {console.log("====")}
                  {console.log(mod)}
                  {/* text section  */}

                  <hr className="my-4" />
                  {/* text section ends */}
                  {console.log(instructor.data)}
                  <InstructorProfileCard
                    id={instructor?.data.id}
                    name={
                      instructor?.data.first_name +
                      " " +
                      instructor?.data.last_name
                    }
                    lastname={instructor?.data.last_name}
                    image={instructor?.data.profile_img}
                  />
                  <LearningTabs
                    description={data?.course_description}
                    id={watch_v}
                  />
                </div>
              </div>

              {/* right section  */}
              <div className="hidden lg:block lg:col-span-3 relative ">
                <div className="sticky top-4 mt-3">
                  <UserProgress
                    clicked={clicked}
                    completed_contents={
                      Progress.data ? Progress.data.completed_contents : null
                    }
                    total_contents={Progress.data?.total_contents}
                  />
                  {/* section part starts  */}
                  <div className="">
                    <CourseSection
                      setClicked={setClickedOne}
                      clicked={clicked}
                      // key={i}
                      // title={item.section_title}
                      // id={item.id}
                      data={data.course_section}
                      body={data.course_section}
                      setVideos={getVideo}
                      // contents={item.course_content}
                      // count={i + 1}
                    />
                  </div>
                  {/* ))} */}
                  {/* section part ends  */}
                </div>
              </div>
              <ToastContainer />
            </div>
          </div>
        </div>
      </Layout>
    </div>
  );
}

export default Learn;
