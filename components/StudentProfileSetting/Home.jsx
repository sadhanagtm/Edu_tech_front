import { MdArrowDropDown, MdArrowDropUp } from "react-icons/md";
import React, { useContext, useEffect, useState } from "react";

import DeleteAccount from "./DeleteAccount";
import Head from "next/head";
import Image from "next/image";
import KYCVerification from "./KycVerification";
import Layout from "../../HOC/Layout/Layout";
import UpdatePassword from "./UpdatePassword";
import UpdateProfile from "./UpdateProfile";
import { UserInfoContext } from "../../HOC/ContextApi/UserInfo";
import axios from "../../HOC/Axios/Axios";

function Home() {
  const [active, setactive] = useState("kyc");
  const [Show, setShow] = useState(true);
  const [stdData, setStdData] = useState([]);
  const { UserInfo } = useContext(UserInfoContext);
  const [KYCDATA, setKYCDATA] = useState(null);
  console.log("KYCDATA", KYCDATA);
  const [Status, setStatus] = useState(false);

  console.log(UserInfo);

  const [Pages, setPages] = useState([
    {
      title: "KYC verification",
      value: "kyc",
    },
    {
      title: "Update password",
      value: "updatePassword",
    },
    {
      title: "update profile",
      value: "updateProfile",
    },
    {
      title: "delete my account",
      value: "deleteAccount",
    },
  ]);

  const profileForm = [
    { label: "update profile", useName: "update profile", type: "file" },
  ];

  // const getKyc
  const GetKycData = () => {
    try {
      axios
        .get("/student-kyc/getOneByStudent")
        .then((res) => {
          if (res.status === 200) {
            // setIsVERIFIED(res.data?res.data.isKycVerified:'notStarted')
            // setREMARK(res.data?.remarks)
            setStatus(true)
            setKYCDATA([res.data]);
          }
          console.log(res);
        })
        .catch((err) => {
          console.log(err);
        });
    } catch (err) {
      console.log(err);
    }
  };
  useEffect(() => {
    GetKycData();
  }, []);
  const Folders = () => {
    let mod;
    // alert(data);
    switch (active) {
      case "kyc":
        mod = (
          <KYCVerification KYCDATA={KYCDATA}
           GetKycData={() => GetKycData()} 
           Status={Status}
           setStatus={()=>setStatus(!Status)}
           />
        );
        break;
      case "updatePassword":
        mod = <UpdatePassword />;
        break;

      case "updateProfile":
        mod = <UpdateProfile />;
        break;

      case "deleteAccount":
        mod = <DeleteAccount />;
        break;
      default:
        break;
    }
    return mod;
  };

  return (
    <div>
      <Head>
        <title className="">Sikka-i</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon-16x16.png" />
      </Head>
      <Layout>
        <div className="bg-grayOne">
          <div
            className="flex flex-col mx-auto w-11/12 
        lg:w-full lg:mx-0 lg:grid grid-cols-12 py-8 lg:py-16 "
          >
            <div className="hidden lg:block lg:col-span-4 mx-auto">
              {UserInfo &&
                UserInfo.map((val, i) => {
                  return (
                    <div key={i} className="lg:pt-12">
                      <div className="relative rounded-full lg:h-24 lg:w-24 bg-grayTwo">
                        <Image
                          src={
                            val.profile_img
                              ? val.profile_img
                              : "https://images.unsplash.com/photo-1614786269829-d24616faf56d?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8NDh8fHBlcnNvbnxlbnwwfHwwfHw%3D&auto=format&fit=crop&w=500&q=1"
                          }
                          alt=""
                          placeholder="blur"
                          blurDataURL={
                            "https://images.unsplash.com/photo-1614786269829-d24616faf56d?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8NDh8fHBlcnNvbnxlbnwwfHwwfHw%3D&auto=format&fit=crop&w=500&q=1"
                          }
                          objectFit="cover"
                          layout="fill"
                          objectPosition={"top"}
                          className="rounded-full"
                        />
                      </div>
                      <div className="font-openSansSeven lg:text-3xl lg:py-8">
                        <div className="capitalize">
                          {val.first_name} {val.last_name}
                        </div>
                        <div className="font-openSansFour text-base pt-1 text-gray">
                          {val.email}
                        </div>
                      </div>
                    </div>
                  );
                })}
              <div className="">
                {Pages.map((val, i) => {
                  return (
                    <div
                      key={i}
                      className={`                    
                    ${
                      active === val.value
                        ? "bg-blue-400  text-white rounded-md"
                        : "hover:text-blue-400 hover:scale-105 "
                    } openSans font-semibold capitalize 
                  lg:py-2 lg:text-lg 
                   cursor-pointer
                   px-5 my-2
                  
                    `}
                      onClick={() => setactive(val.value)}
                    >
                      {val.title}
                    </div>
                  );
                })}
              </div>
            </div>
            <div className="my-4 lg:hidden">
              <div
                className="bg-primary text-white 
          text-lg flex items-center justify-between
          capitalize rounded-t-md  p-4 cursor-pointer "
                onClick={() => setShow(!Show)}
              >
                <div>Profile Setting</div>
                <div className="text-4xl">
                  {Show ? <MdArrowDropDown /> : <MdArrowDropUp />}
                </div>
              </div>
              <div className="w-full rounded-sm h-fit  bg-grayTwo transition-all duration-150">
                <div className="">
                  {Show &&
                    Pages.map((val, i) => {
                      return (
                        <div
                          key={i}
                          className={`font-openSansSix capitalize 
                  p-4 my-3 text-base w-full
                   cursor-pointer
                   ${
                     active === val.value
                       ? "bg-blue-400 text-white rounded-md"
                       : null
                   }
                  hover:bg-blue-400 hover:text-white hover:rounded-md
                  `}
                          onClick={() => setactive(val.value)}
                        >
                          {val.title}
                        </div>
                      );
                    })}
                </div>
              </div>
            </div>
            <div className="lg:col-span-8 w-full lg:w-11/12 bg-white h-fit rounded-md ">
              {Folders()}
            </div>
          </div>
        </div>
      </Layout>
    </div>
  );
}

export default Home;
